#!/usr/bin/env python

from buildbot.buildslave import BuildSlave
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
from buildbot.changes.pb import PBChangeSource
from buildbot.process.properties import WithProperties, Property
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import Compile, Test, SetProperty, ShellCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.trigger import Trigger
from buildbot.config import BuilderConfig
from buildbot.status.html import WebStatus
from buildbot.status.web.base import StaticFile, DirectoryLister
from buildbot.status.web.authz import Authz
from buildbot.status.mail import MailNotifier, defaultMessage
from buildbot.locks import SlaveLock
import urllib

buildtag_fmt = 'Build_'
configs = [
    ( 'win-slave', 'win', [ 'win_x86_debug', 'win_x86_release', 'win_x64_debug', 'win_x64_release' ] ),
    ( 'ubuntu-slave', 'ubuntu', [ 'linux_x86_debug', 'linux_x86_release', 'linux_x86_64_debug', 'linux_x86_64_release' ] ),
    ( 'mac-slave', 'mac', [ 'osx_debug', 'osx_release' ] ),
]

c = BuildmasterConfig = {}

c['title'] = "Peach"
c['titleURL'] = "http://peachfuzzer.com"
c['buildbotURL'] = "http://10.0.1.35:8010/"
c['db_url'] = "sqlite:///state.sqlite"
c['change_source'] = [ PBChangeSource() ]
c['slaves'] = [ BuildSlave(server, pwd) for (server, pwd, targets) in configs ]
c['slavePortnum'] = 9989
c['properties'] = {
    'output'       : 'output',
}

c['builders'] = []

def changes_fn(rc, stdout, stderr):
    return int(rc) != 0 and {} or { 'changed' : stdout and 'false' or 'true' }

def buildtag_fn(rc, stdout, stderr):
    return int(rc) != 0 and {} or { 'buildtag' : int(stdout.split('\n')[0][len(buildtag_fmt):]) + 1 }

def is_nightly(self):
    return self.getProperty('scheduler')

def has_changed(self):
    return not is_nightly(self) or self.getProperty('changed', 'true') == 'true'

def step(type, **kw):
    if 'name' in kw and 'description' not in kw:
        kw['description'] = kw['name']
    if 'name' in kw and 'descriptionDone' not in kw:
        kw['descriptionDone'] = kw['name']
    if 'command' in kw:
        kw['command'] = WithProperties(kw['command'])
    kw['haltOnFailure'] = True
    kw['doStepIf'] = has_changed
    return type(**kw)

# Only allow 1 git operation at a time on windows
git_lock = SlaveLock('git', maxCount=100, maxCountForSlave = { 'win-slave' : 1 })
git_clone = Git(repourl='ssh://github/dejavu/peach.git', branch='master', mode='full', method='fresh', locks=[git_lock])

nightly = BuildFactory()
nightly.addSteps([
    git_clone,
    step(SetProperty, name='get changes', extract_fn=changes_fn, command='git describe --tags --abbrev=0 --match="%s*" --exact || true' % buildtag_fmt),
    step(SetProperty, name='get buildtag', extract_fn=buildtag_fn, command='git describe --tags --abbrev=0 --match="%s*"' % buildtag_fmt),
    step(ShellCommand, name='set buildtag', command='git tag %s%%(buildtag:-)s' % buildtag_fmt),
    step(ShellCommand, name='push buildtag', command='git push --tags'),
    step(MasterShellCommand, name='mkdir output', command='mkdir -p %(output)s/%(buildtag:-)s'),
    step(Trigger, schedulerNames=['build'], copy_properties=['buildtag', 'output'], waitForFinish=True),
    step(MasterShellCommand, name='fix permissions', command='chmod -v go+rX %(output)s && chmod -Rv go+rX %(output)s/%(buildtag:-)s'),
])
c['builders'].append( BuilderConfig(name='release', slavename='ubuntu-slave', factory=nightly) )

def make_builder(slave, name):
    bf = BuildFactory()
    bf.addStep( git_clone )
    bf.addStep( Compile( command=WithProperties('%%(workdir)s/build/waf configure build install --buildtag=%%(buildtag:-0)s --variant=%s -v' % name) ) )
    bf.addStep( Test( command=WithProperties('%%(workdir)s/build/waf test --buildtag=%%(buildtag:-0)s --variant=%s -v -j 1' % name), flunkOnFailure=False ) )
    bf.addStep( DirectoryUpload( slavesrc='output', masterdest=WithProperties('%(output)s/%(buildtag:-)s'), doStepIf=is_nightly) )
    c['builders'].append( BuilderConfig(name='%s' % (name), slavenames=[ slave ], factory=bf) )

[ [ make_builder(server, name) for name in targets ] for (server, pwd, targets) in configs ]

c['schedulers'] = []
c['schedulers'].append( Nightly(name='release', builderNames=['release'], branch='master', hour=0, minute=0) )
c['schedulers'].append( Triggerable(name='build', builderNames=[ x.name for x in c['builders'][1:] ] ) )


authz_cfg = Authz(
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

www = WebStatus(http_port=8010, authz=authz_cfg, change_hook_dialects={'github' : True} )
www.putChild('output', StaticFile('output/'))

def skippedMessage(mode, name, build, results, master_status):
    text = "The Buildbot has skipped a build due to a lack of repository changes.\n"
    if master_status.getURLForThing(build):
        text += "Full details are available at:\n %s\n" % master_status.getURLForThing(build)
    text += "\n"
    if master_status.getBuildbotURL():
        text += "Buildbot URL: %s\n\n" % urllib.quote(master_status.getBuildbotURL(), '/:')
    text += "Buildslave for this Build: %s\n\n" % build.getSlavename()
    text += "Build Reason: %s\n" % build.getReason()
    text += "Build skipped!\n"
    text += "\n"
    text += "sincerely,\n"
    text += " -The Buildbot\n"
    text += "\n"
    return { 'body' : text, 'type' : 'plain', 'subject' : '[buildbot] %s %s build skipped.' % (master_status.getTitle(), name) }

def successMessage(mode, name, build, results, master_status):
    if not has_changed(build):
        return skippedMessage(mode, name, build, results, master_status)
    return defaultMessage(mode, name, build, results, master_status)

def make_mailer(builders, mode, subject, messageFormatter):
    return MailNotifier(
        fromaddr='seth@dejavusecurity.com',
        sendToInterestedUsers=False,
        extraRecipients=[
            'devpso@dejavusecurity.com',
        ],
        useTls=True,
        relayhost='smtp.gmail.com',
        smtpPort=587,
        smtpUser='seth@dejavusecurity.com',
        smtpPassword='xxxxxxxx',
        mode=mode,
        builders=builders,
        subject='[buildbot] %%(title)s %%(builder)s build %s.' % subject,
        messageFormatter=messageFormatter,
    )

success = make_mailer(builders=['release'], mode='passing', subject='succeeded', messageFormatter=successMessage)
fail = make_mailer(builders=['release'], mode='failing', subject='failed', messageFormatter=defaultMessage)


c['status'] = []
c['status'].extend([www, success, fail])

